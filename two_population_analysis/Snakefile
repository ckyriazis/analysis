
"""
Snakefile for running dadi and fastsimcoal2 and dadi on stdpopsim data.
"""

import pathlib
import sys

import numpy as np
import stdpopsim
import fastsimcoal
import dadi_utils
import simulations
import plots
import tskit


# ###############################################################################
# KNOBS -
# ###############################################################################

# A seed to replicate results
# TODO mutation rates

configfile: config["config"]+"/config.json"

np.random.seed(config["seed"])

# This is the number of samples to simulate for each analysis
num_sampled_genomes_per_replicate = config["num_sampled_genomes_per_replicate"]

# The number of replicates of each analysis you would like to run
replicates = config["replicates"]

# Where you would like all output files from analysis to live
output_dir = config["config"]

# The analysis species
species = getattr(stdpopsim,config["species"])

# The specific model you would like to run
model_class = getattr(species,config["model"])
model = model_class()

# The genetic map you would like to use.
genetic_map_class = getattr(species,config["genetic_map"])
genetic_map = genetic_map_class()

# The names of all chromosomes to simulate, separated by commas
# Use "all" to simulate all chromsomes for the genome
chrm_list = [chrom for chrom in species.genome.chromosomes]
if(config["chrm_list"] != "all"):
    chrm_list = [chr for chr in config["chrm_list"].split(",")]

# The model for inference with dadi and fsc
# leaving these hard coded as an IM model for now since the more complex models are not converging
demo_models_list = ['IM_fsc']#,'Gute2pop']

# The number of dadi runs
# Also leaving this hard coded for now
# Ideally want this to apply to both dadi and fsc but having problems with automating fsc (see below)
fit_runs = 10

# ###############################################################################
# GENERAL RULES & GLOBALS
# ###############################################################################



seed_array = np.random.random_integers(1,2**31,replicates)
dadi_seed_array = np.random.randint(0, 4294967295 + 1, fit_runs)
genetic_map_downloaded_flag= ".genetic_map_downloaded"

rule all:
    input: output_dir + "/estimates_N_tdiv_dadi_fsc.png", output_dir + "/estimates_mig_dadi_fsc.png"

rule download_genetic_map:
    output: genetic_map_downloaded_flag
    message: "Downloading default genetic map"
    run:
        # We need to have this here to avoid several threads trying to download the
        # the genetic map into the cache at the same time.
        #genetic_map = stdpopsim.homo_sapiens.HapmapII_GRCh37()
        if not genetic_map.is_cached():
            genetic_map.download()
        with open(output[0], "w") as f:
            print("File to indicate genetic map has been downloaded", file=f)

rule simulation:
    input:
        genetic_map_downloaded_flag,
        # rules.top_directory.output,
    output:
        output_dir + "/{seeds}/{chrms}.trees"
    # TODO get simulation parameters from stdpopsim, so we can share them easily
    # with anlysis code below?
    run:
        simulations.simulate(
            out_path = output[0], species = species, model = model,
            genetic_map = genetic_map, seed = wildcards.seeds,
            chrmStr = wildcards.chrms, sample_size = num_sampled_genomes_per_replicate)


# ###############################################################################
# dadi
# ###############################################################################


rule ts_to_dadi_sfs:
    input:rules.simulation.output
    output: output_dir + "/{seeds}/{chrms}_dadi_joint_sfs.fs",
            output_dir + "/{seeds}/{chrms}_dadi_joint_sfs_with_nonvariant.fs"
    # TODO get simulation parameters from stdpopsim, so we can share them easily
    # with anlysis code below?
    threads: 2

    run:
        #out_path = expand(output_dir + "/{seeds}/{chrms}_dadi_joint_sfs", seeds=wildcards.seeds, chrms=wildcards.chrms)
        dadi_utils.ts_to_dadi_sfs(input[0], output[0],output[1], sample_size = num_sampled_genomes_per_replicate)

rule compare_msprime_sfs_to_OutOfAfrica_model:
    input: expand(output_dir + "/{seeds}/{chrms}_dadi_joint_sfs.fs", seeds=seed_array, chrms=chrm_list)

    output: output_dir +  "/{seeds}/dadi_analysis/compare_dadi_to_int_sfs_resid_range_50.pdf"
    run:
        inputs = expand(output_dir + "/{seeds}/{chrms}_dadi_joint_sfs.fs", seeds=wildcards.seeds, chrms=chrm_list)
        dadi_utils.compare_msprime_dadi_OutOfAfrica(inputs,output[0],num_sampled_genomes_per_replicate)

rule fit_dadi_model_to_msprime_sfs:
    input: expand(output_dir + "/{seeds}/{chrms}_dadi_joint_sfs.fs", seeds=seed_array, chrms=chrm_list)
    output:
        output_dir +  "/{seeds}/dadi_analysis/{demo_models}/model_fit_{fit_seeds}.pdf",
        output_dir +  "/{seeds}/dadi_analysis/{demo_models}/model_params_{fit_seeds}.txt"

    threads: 4
    run:
        inputs = expand(output_dir + "/{seeds}/{chrms}_dadi_joint_sfs.fs", seeds=wildcards.seeds, chrms=chrm_list)
        dadi_utils.fit_dadi_model(inputs,output[0],output[1],wildcards.demo_models, wildcards.fit_seeds,num_sampled_genomes_per_replicate)



# ###############################################################################
# fastsimcoal
# ###############################################################################


rule dadi_sfs_to_fsc:
    # TODO: replace "IM" in the paths below with {demo_models}
    input: expand(output_dir + "/{seeds}/{chrms}_dadi_joint_sfs_with_nonvariant.fs", chrms=chrm_list,seeds=seed_array)

    output: output_dir + "/{seeds}/fsc_analysis/{demo_model}_jointDAFpop1_0.obs"

    threads: 2
    run:
        inputs = expand(output_dir + "/{seeds}/{chrms}_dadi_joint_sfs_with_nonvariant.fs", chrms=chrm_list,seeds=wildcards.seeds)
        dadi_out_path = output_dir + "/" + wildcards.seeds + "/all_chrm_dadi_joint_sfs_with_nonvariant.fs"
        fsc_out_path  = output_dir + "/" + wildcards.seeds + "/fsc_analysis/"+wildcards.demo_model+"_jointDAFpop1_0.obs"
        fastsimcoal.dadi_to_fsc_sfs(inputs, dadi_out_path, fsc_out_path, sample_size=num_sampled_genomes_per_replicate)


rule fsc_setup:
    input: expand(output_dir + "/{seeds}/fsc_analysis/{demo_model}_jointDAFpop1_0.obs", seeds=seed_array,demo_model=demo_models_list)

    output: output_dir + "/{seeds}/fsc_analysis/{demo_model}.est",
            output_dir + "/{seeds}/fsc_analysis/{demo_model}.tpl"
#            sed -i '' 's/SAMPLE_SIZE/{num_sampled_genomes_per_replicate}/g' {output_dir}/{wildcards.seeds}/fsc_analysis/IM.tpl &&\

    shell: "cp fsc_files/{wildcards.demo_model}.est {output_dir}/{wildcards.seeds}/fsc_analysis/{wildcards.demo_model}.est && \
            cp fsc_files/{wildcards.demo_model}.tpl {output_dir}/{wildcards.seeds}/fsc_analysis/{wildcards.demo_model}.tpl && \
            sed -i.bak 's/SAMPLE_SIZE/{num_sampled_genomes_per_replicate}/' {output_dir}/{wildcards.seeds}/fsc_analysis/{wildcards.demo_model}.tpl && rm {output_dir}/{wildcards.seeds}/fsc_analysis/{wildcards.demo_model}.tpl.bak"


rule run_fsc:
    input: expand(output_dir + "/{seeds}/fsc_analysis/{demo_model}.tpl", seeds=seed_array,demo_model=demo_models_list)

    output: output_dir + "/{seeds}/fsc_analysis/run10/{demo_model}/{demo_model}.bestlhoods"


    # I want to run this with a bash loop from 1..fit_runs to automate the number of fsc runs but for the life of me I cant get it to work in snakemake (it works fine in a shell script)
    # it keeps spitting out a python 'out of index' error and I've spent way too much time trying to troubleshoot it with no success
    # if someome can figure this out they would be my hero. Until that day, will continue to use this wall of bash code
    shell: "cd {output_dir}/{wildcards.seeds}/fsc_analysis/  && \
              mkdir run1 &&\
              cd run1 &&\
              cp ../{wildcards.demo_model}* ./ &&\
              ../../../../fsc26/fsc26 fsc26 -t {wildcards.demo_model}.tpl -n 100000 -d -e {wildcards.demo_model}.est -M -L 40 -q &&\
              cd .. &&\
              mkdir run2 &&\
              cd run2 &&\
              cp ../{wildcards.demo_model}* ./ &&\
              ../../../../fsc26/fsc26 fsc26 -t {wildcards.demo_model}.tpl -n 100000 -d -e {wildcards.demo_model}.est -M -L 40 -q &&\
              cd .. &&\
              mkdir run3 &&\
              cd run3 &&\
              cp ../{wildcards.demo_model}* ./ &&\
              ../../../../fsc26/fsc26 fsc26 -t {wildcards.demo_model}.tpl -n 100000 -d -e {wildcards.demo_model}.est -M -L 40 -q &&\
              cd .. &&\
              mkdir run4 &&\
              cd run4 &&\
              cp ../{wildcards.demo_model}* ./ &&\
              ../../../../fsc26/fsc26 fsc26 -t {wildcards.demo_model}.tpl -n 100000 -d -e {wildcards.demo_model}.est -M -L 40 -q &&\
              cd .. &&\
              mkdir run5 &&\
              cd run5 &&\
              cp ../{wildcards.demo_model}* ./ &&\
              ../../../../fsc26/fsc26 fsc26 -t {wildcards.demo_model}.tpl -n 100000 -d -e {wildcards.demo_model}.est -M -L 40 -q &&\
              cd .. &&\
              mkdir run6 &&\
              cd run6 &&\
              cp ../{wildcards.demo_model}* ./ &&\
              ../../../../fsc26/fsc26 fsc26 -t {wildcards.demo_model}.tpl -n 100000 -d -e {wildcards.demo_model}.est -M -L 40 -q &&\
              cd .. &&\
              mkdir run7 &&\
              cd run7 &&\
              cp ../{wildcards.demo_model}* ./ &&\
              ../../../../fsc26/fsc26 fsc26 -t {wildcards.demo_model}.tpl -n 100000 -d -e {wildcards.demo_model}.est -M -L 40 -q &&\
              cd .. &&\
              mkdir run8 &&\
              cd run8 &&\
              cp ../{wildcards.demo_model}* ./ &&\
              ../../../../fsc26/fsc26 fsc26 -t {wildcards.demo_model}.tpl -n 100000 -d -e {wildcards.demo_model}.est -M -L 40 -q &&\
              cd .. &&\
              mkdir run9 &&\
              cd run9 &&\
              cp ../{wildcards.demo_model}* ./ &&\
              ../../../../fsc26/fsc26 fsc26 -t {wildcards.demo_model}.tpl -n 100000 -d -e {wildcards.demo_model}.est -M -L 40 -q &&\
              cd .. &&\
              cd run10 &&\
              cp ../{wildcards.demo_model}* ./ &&\
              ../../../../fsc26/fsc26 fsc26 -t {wildcards.demo_model}.tpl -n 100000 -d -e {wildcards.demo_model}.est -M -L 40 -q"




# ###############################################################################
# Compile results and plot
# ###############################################################################


rule get_dadi_fsc_output:
    input: expand(output_dir +  "/{seeds}/dadi_analysis/{demo_model}/model_params_{fit_seeds}.txt", fit_seeds=dadi_seed_array, seeds=seed_array, demo_model=demo_models_list),
           expand(output_dir +  "/{seeds}/fsc_analysis/run10/{demo_model}/{demo_model}.bestlhoods",seeds=seed_array,demo_model=demo_models_list)

    output: output_dir+"/{seeds}/dadi_analysis/dadi_results_sorted.txt",output_dir+"/{seeds}/fsc_analysis/fsc_results_sorted.txt"

    run:
        for seed in seed_array:
            dadi_utils.get_dadi_output_IM(output_dir+"/"+str(seed)+ "/dadi_analysis/",demo_models_list[0],dadi_seed_array,"dadi_results_sorted.txt")
            fastsimcoal.get_fsc_output(output_dir+"/"+str(seed)+"/fsc_analysis/",10,"fsc_results_sorted.txt",demo_models_list[0])

rule get_best_dadi_fsc_runs:
    input: expand(output_dir+"/{seeds}/dadi_analysis/dadi_results_sorted.txt", seeds=seed_array),
           expand(output_dir+"/{seeds}/fsc_analysis/fsc_results_sorted.txt", seeds=seed_array)

    output: output_dir + "/best_fsc_runs.txt", output_dir + "/best_dadi_runs.txt"

    run:
        dadi_utils.get_best_dadi_runs(output_dir, seed_array, output[1])
        fastsimcoal.get_best_fsc_runs(output_dir, seed_array, output[0])


rule plot_estimates:
    input: rules.get_best_dadi_fsc_runs.output

    output: output_dir + "/estimates_N_tdiv_dadi_fsc.png", output_dir + "/estimates_mig_dadi_fsc.png"

    run:
        simulated_genome_length = 0
        # for case when only one chromosome is simulated
        if(isinstance(chrm_list,str)):
            ts=tskit.load(output_dir+"/"+str(seed_array[0])+"/"+chrm_list+".trees")
            simulated_genome_length = ts.sequence_length
        # for case when more than one chromosome is simulated
        else:
            for chr in chrm_list:
                ts=tskit.load(output_dir+"/"+str(seed_array[0])+"/"+chr+".trees")
                simulated_genome_length += ts.sequence_length
        if config["species"] == "drosophila_melanogaster":
            plots.plot_fsc_dadi_results_drosophila_IM(input[1], input[0],output, simulated_genome_length)
        if config["species"] == "homo_sapiens":
            plots.plot_fsc_dadi_results_human_IM(input[1], input[0],output, simulated_genome_length)
